program Duplicates;
function F (n : integer) : integer;  
begin
    if n = 0 then
        return 1;  
    else
        return n - M (F (n-1));  
end;  

function F (n : integer) : integer;  
begin
    if n = 0 then
        return 1;  
    else
        return n - M (F (n-1));  
end;  

function M (n : integer) : integer;  
begin
    if n = 0 then return 0;  
else return n - F (M (n-1));  
end;

function Sum (data : array [] of integer) : integer; 
begin
    var i, sum : integer;    
    i := 0; sum := 0;  
    while i < data.size do begin    
        sum := sum + data [i];  i := i + 1; 
    end; 
    return sum; 
end;

function Sum (data : array [] of integer) : integer; 
begin
    var i, sum : integer;    
    i := 0; sum := 0;  
    while i < data.size do begin    
        sum := sum + data [i];  i := i + 1; 
    end; 
    return sum; 
end;

procedure Swap (var i : integer, var j : integer);  
begin
    var tmp : integer;    
    tmp := i;  i := j;  j := tmp;  
end;

procedure Swap (var i : integer, var j : integer);  
begin
    var tmp : integer;    
    tmp := i;  i := j;  j := tmp;  
end;  

begin
    var i : integer;      
    i := 0; 
    while i <= 19 do  writeln (F (i));     
    i := 0; 
    while i <= 19 do  writeln (M (i));  
end. 